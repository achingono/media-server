@rendermode InteractiveServer
@inject IStateService<QueueState> QueueStateService
@inject IStateService<PlayerState> PlayerStateService

<FluentDataGrid Items="@Items"  TGridItem="Models.TrackModel"
ShowHover="true" RowSize="DataGridRowSize.Large">
    <SelectColumn TGridItem="Models.TrackModel"
    SelectMode="DataGridSelectMode.Multiple" 
    SelectFromEntireRow="false" 
    Property="@(x => x.IsSelected)"
    OnSelect="@(e => e.Item.IsSelected = e.Selected)"
    SelectAll="@(Items!.All(p => p.IsSelected))"
    SelectAllChanged="@(all => Items!.ToList().ForEach(p => p.IsSelected = (all == true)))">
    </SelectColumn>
    <PropertyColumn Property="@(t => t.Number)" Sortable="true" Title="#" Width="65px" />
    <TemplateColumn Title="Name" Class="multiline-text">
        @context.Name<br/>
        <small><small><small>@context.Album?.Artist?.Name</small></small></small>
    </TemplateColumn>
    <PropertyColumn Property="@(t => TimeSpan.FromSeconds(t.Duration))" Format="g" Sortable="true" Title="" Width="106px">
        <HeaderCellItemTemplate>
            <FluentIcon Value="@(new Icons.Regular.Size32.Timer())" Color="@Color.FillInverse" />
        </HeaderCellItemTemplate>
    </PropertyColumn>
    <TemplateColumn Width="58px">
        <FluentIcon Value="@PlayIcon(context)" Color="@Color.FillInverse"
        OnClick="@(e => PlayPause(context))" />
    </TemplateColumn>
</FluentDataGrid>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    [Parameter]
    public IQueryable<Models.TrackModel>? Items { get; set; }
    private QueueState QueueState { get => QueueStateService.State; }
    private PlayerState PlayerState { get => PlayerStateService.State; }
    protected Icon PlayIcon(Models.TrackModel track)
    {
        if (track.Id == QueueState.CurrentTrack?.Id && PlayerState.Playing)
            return new Icons.Filled.Size32.Pause();
        return new Icons.Regular.Size32.Play();
    }
    protected Color PlayColor (Models.TrackModel track)
    {
        if (track.Id == QueueState.CurrentTrack?.Id && PlayerState.Playing)
            return Color.Accent;
        return Color.FillInverse;
    }

    protected override void OnInitialized()
    {
        PlayerStateService.OnChange += StateHasChanged;
        QueueStateService.OnChange += StateHasChanged;
    }

    protected void PlayPause(Models.TrackModel track)
    {
        if (track.Id == QueueState.CurrentTrack?.Id && PlayerState.Playing)
        {
            QueueStateService.Patch(state => state.AutoPlay = false);
        }
        else
        {
            QueueStateService.Patch(state =>
            {
                state.Items = Items!;
                state.CurrentIndex = Items!.Select((x, i) => new { Item = x, Index = i })
                                                .FirstOrDefault(x => x.Item.Id == track.Id)?
                                                .Index ?? 0;
                state.AutoPlay = true;
            });
        }
    }
}
