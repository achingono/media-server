@page "/albums/{id:guid}"
@rendermode InteractiveServer
@inject HttpClient Client
@inject IStateService<QueueState> QueueStateService
@inject IStateService<PlayerState> PlayerStateService

<PageTitle>@Entity.Name - Album by @Entity.Artist?.Name</PageTitle>

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom"  Width="100%">
    <div>
        <img alt="@Entity.Name" src="@(Entity.AlbumImages?.FirstOrDefault()?.Url ?? $"https://placehold.co/260x200?text={Entity.Name}&font=roboto")" />        
    </div>
    <div>
        <h6>Album</h6>
        <h1>@Entity.Name</h1>
        <h5><a href="/artists/@Entity.Artist?.Id"><strong>@Entity.Artist?.Name</strong></a> &bull; @(Entity.ReleasedOn.Year) &bull; @(Collection.Count()) songs &bull; @(TimeSpan.FromSeconds(Collection.Sum(x => x.Duration)).ToString("g"))</h5>
    </div>
</FluentStack>

<TrackList Items="@Collection" />

@code {
    [Parameter]
    public Guid? Id { get; set; }
    private Entities.Album Entity = new();
    private IQueryable<Models.TrackModel>? Collection = Enumerable.Empty<Models.TrackModel>().AsQueryable();
    
    protected override async Task OnParametersSetAsync()
    {
        Entity = (await Client.GetFromJsonAsync<IEnumerable<Entities.Album>>($"albums?$filter=Id eq {Id}&$expand=Artist"))!.SingleOrDefault() ?? new();
        Collection = (await Client.GetFromJsonAsync<IEnumerable<Models.TrackModel>>($"tracks?filter=Album/Id eq {Id}&$expand=Album($expand=Artist)&$orderby=Number"))!.AsQueryable() ??
                    Enumerable.Empty<Models.TrackModel>().AsQueryable();
    }
}
