@rendermode InteractiveServer
@using Microsoft.Extensions.Configuration
@using MediaServer.Web.Components.Player.Buttons
@inject IConfiguration Configuration
@inject IStateService<PlayerState> PlayerStateService
@inject IStateService<QueueState> QueueStateService
@inject IJSRuntime JSRuntime

<FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center"
HorizontalAlignment="HorizontalAlignment.Center">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center"
    HorizontalAlignment="HorizontalAlignment.Center" Width="100%">
        <Shuffle />
        <Previous />
        <Play AudioElement="AudioElement" />
        <Next />
        <Repeat />
    </FluentStack>
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center"
        HorizontalAlignment="HorizontalAlignment.Center" Width="100%">
        <audio @ref="AudioElement" src="@PlayerSource" 
            @oncanplay="OnCanPlay" @onplaying="OnPlaying" @onpause="OnPause"
            @onloadedmetadata="OnLoadedMetadaAsync" @onended="OnEnded" />
        <div class="current-time"></div>
        <fluent-slider class="horizontal" orientation="horizontal" aria-orientation="horizontal"
            mode="single-value" role="slider" tabindex="0" step="1" min="0" aria-valuemin="0" max="@PlayerState.Duration" aria-valuemax="@PlayerState.Duration"
            value="0" aria-valuenow="0" current-value="0"/>
        <div class="duration">@TimeSpan.FromSeconds(PlayerState.Duration).ToString("g")</div>
    </FluentStack>
</FluentStack>
@code {
    private string baseAddress = string.Empty;
    private PlayerState PlayerState { get => PlayerStateService.State;  }
    private QueueState QueueState { get => QueueStateService.State;  }
    private string PlayerSource { 
        get {
            if (QueueState.Track == null)
                return string.Empty;
            return $"{baseAddress}/stream/{QueueState.Track?.Id}";
        }
    }
    protected ElementReference AudioElement { get; set; }
    protected Color PlayColor {
        get {
            if (PlayerState.CanPlay)
                return Color.Accent;
            return Color.FillInverse;
        }
    }

    protected void OnPause() {
        PlayerStateService.Patch(state => state.Playing = false );
    }

    protected void OnCanPlay() {
        PlayerStateService.Patch(state => state.CanPlay = true);
    }

    protected void OnPlaying() {
        PlayerStateService.Patch(state => state.Playing = true);
    }

    protected async Task OnLoadedMetadaAsync() 
    {
        var duration = await JSRuntime.InvokeAsync<int>("GetDuration", AudioElement);
        PlayerStateService.Patch(state => state.Duration = duration);
    }

    protected async Task OnTimeUpdateAsync()
    {
        var currentTime = await JSRuntime.InvokeAsync<int>("GetCurrentTime", AudioElement);
        PlayerStateService.Patch(state => state.CurrentTime = currentTime);
    }

    protected void OnEnded()
    {
        if (QueueState.HasNext || QueueState.RepeatMode == RepeatMode.Single)
        {
            QueueStateService.Patch(state =>
            {
                state.Next();
            });
        }
        else
        {
            PlayerStateService.Patch(state => state.Playing = false);
        }
    }

    protected override void OnInitialized()
    {
        baseAddress = Configuration["Api:BaseAddress:External"] ?? string.Empty;
        PlayerStateService.OnChange += StateHasChanged;
        QueueStateService.OnChange += () => {
            StateHasChanged();
            if (QueueState.AutoPlay) {
                JSRuntime.InvokeVoidAsync("PlayAudio", AudioElement);
            }
            else if (PlayerState.Playing) {
                JSRuntime.InvokeVoidAsync("PauseAudio", AudioElement);
            }
        };
    }
}