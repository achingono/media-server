@rendermode InteractiveServer
@using MediaServer.Web.Services
@using MediaServer.Web.State
@inject IStateService<QueueState> StateService
@inject IJSRuntime JSRuntime

<FluentIcon Value="@(new Icons.Regular.Size32.Next())" Color="@Color" OnClick="PlayNext" />

@code {
    [Parameter]
    public ElementReference AudioElement { get; set; }
    private QueueState QueueState { get => StateService.State;  }
    protected Color Color {
        get {
            if (QueueState.HasNext)
                return Color.Accent;
            return Color.FillInverse;
        }
    }

    protected void PlayNext () {
        StateService.Patch(state => {
            state.CurrentIndex = state.CurrentIndex < state.Items.Count() - 1 ? 
                                    state.CurrentIndex + 1 : 0;
            state.AutoPlay = true;
        });
    }

    protected override void OnInitialized()
    {
        StateService.OnChange += StateHasChanged;
    }
}